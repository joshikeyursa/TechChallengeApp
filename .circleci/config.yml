# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.6

jobs:
  build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...

  deploy:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - run:
          name: Setup
          command: |
            go get -v -t -d ./...
            go get github.com/GeertJohan/go.rice/rice
            mkdir output
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .
            ls
            ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile


      - run: 
          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)
            
            zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*

      # build for macos
      - run: 
          name: Build for macOS
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/

            rm TechChallengeApp

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_darwin.zip" dist/*

      # build windows 64 bit
      - run: 
          name: Build Windows 64bit
          environment:
            GOOS: windows
            GOARCH: amd64
          command: | 
            # cross compile to windows in linux requires a few extra bits
            # this gets around permission issues
            sudo chmod -R 0777 /usr/local/go/
            go get github.com/inconshreveable/mousetrap
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win64.zip" dist/*

      #build windows 32 bit
      - run: 
          name: Build Windows 32bit
          environment:
            GOOS: windows
            GOARCH: 386
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win32.zip" dist/*

      - run:
          name: Release if new version
          command: |
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go get github.com/tcnksm/ghr

              if [ -z "${prerelease}" ]; then
                echo "No pre-release in version, creating release"
                ghr -u servian ${version} output
              else
                echo "Found pre-release in version, creating pre-release"
                ghr -u servian -prerelease ${version} output
              fi
            fi

      - store_artifacts:
          path: output

  create-aws-compute-infra:
    #executor: aws-cli/default
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Create Network components
          command: | 
            aws cloudformation deploy --template-file aws-infra/onetime-compute-intra.yaml --stack-name servian-tech-challenge-app-onetime-copute-infra --tags company=Servian

  create-aws-rds-infra:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup:
          profile-name: default
      - run:
          no_output_timeout: 30m
          name: Create Basic RDS Infrastructucture
          command: |
            aws ssm put-parameter --name $ENV_DB_USER_KEY --value $ENV_DB_USER_VALUE --type String --overwrite
            aws ssm put-parameter --name $ENV_DB_PWD_KEY --value $ENV_DB_PWD_VALUE --type SecureString --overwrite
            aws cloudformation deploy --template-file aws-infra/onetime-rds-infra.yaml --stack-name servian-tech-challenge-rds-infra
            
  create-aws-support-infra:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Create Basic ECS/R Infrastructucture
          command: |

            aws cloudformation deploy --template-file aws-infra/onetime-nw-infra.yaml --stack-name servian-tech-challenge-app-onetime-nw-infra --tags company=Servian
            aws cloudformation deploy --capabilities CAPABILITY_NAMED_IAM --template-file aws-infra/onetime-ecs-infra-and-roles.yaml --stack-name servian-tech-challenge-ecs-infra-and-roles  --tags company=Servian

  push-image-to-ecr-and-deploy-on-ecs:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Push Docker image to ECR Repo
          command: |
            aws cloudformation deploy --template-file aws-infra/ecs-task-def.yaml --stack-name servian-techchallenge-app-ecs-task-def

  create-task-definition:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Create and Execute task
          command: |
            aws cloudformation deploy --template-file aws-infra/

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - deploy:
          requires: 
            - build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - create-aws-support-infra:
          requires:
            - build # Eventually build will take care of creating new impage so added dependency
          filters:
            branches:
              only: infra
      - create-aws-compute-infra:
          requires: 
            - create-aws-support-infra
          filters:
            branches:
              only: infra
      - create-aws-rds-infra:
          requires:
            - create-aws-support-infra
          filters:
            branches:
              only: infra
      
      
      - push-image-to-ecr-and-deploy-on-ecs:
          requires:
            - create-aws-rds-infra
            - create-aws-compute-infra
          filters:
            branches:
              only: infra