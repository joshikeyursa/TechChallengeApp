Parameters:
  Environment:
    Type: String
    Default: Development
    AllowedValues:
      - Development
      - Production
      - Local
      - Integration
      - Test

Conditions:
  CreateDevSchedules: !Equals
    - !Ref Environment
    - Development

Mappings:
  InstanceTypeMap:
    Production:
      "InstanceType": "m4.large" #Put an appropriate instance type once ready for prod.
    Development:
      "InstanceType": "t3.micro"
  InstanceMinMax:
    Production:
      MinInstance: 2
      MaxInstance: 5
    Development:
      MinInstance: 1
      MaxInstance: 1
  #For now only Singapore and Sydney configurations are added. As an improvement use SSM commands to fetch these values
  ImageByRegionMap:
    ap-southeast-1:
      "HVM64": "ami-04e3e68fcfc9ca078"
    ap-southeast-2:
      "HVM64": "ami-012bb964803d474e5"

Conditions:
  CreateDevSchedules: !Equals
    - !Ref Environment
    - Development

Resources:
  ServianTechChallengeAppECSLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ServianTechChallengeAppLauchTemplate
      LaunchTemplateData:
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: one-time
            MaxPrice: 0.0045
            InstanceInterruptionBehavior: terminate
        SecurityGroupIds:
          - !ImportValue ServianTechChallengAppSG
        ImageId: !FindInMap [ImageByRegionMap,!Ref "AWS::Region",HVM64] #There should be a way to fetch this by Parameter Store value ImageByRegionMap/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
        InstanceType: !FindInMap [InstanceTypeMap,!Ref 'Environment',InstanceType]
        KeyName: keyur-new-mac-v1 #Remove this later
        IamInstanceProfile:
          Arn: !ImportValue ECSInstanceProfileArn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            echo ECS_CLUSTER=ServianTechChallengeAppCluster >> /etc/ecs/ecs.config
            echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config
  ServianTechChallengeAppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ServianTechChallengeAppASG
      LaunchTemplate:
        LaunchTemplateId: !Ref ServianTechChallengeAppECSLT
        Version: !GetAtt ServianTechChallengeAppECSLT.LatestVersionNumber
      AvailabilityZones:
        - !ImportValue ServianTechChallengeAppPubAZ1 
        - !ImportValue ServianTechChallengeAppPubAZ2
      MinSize: !FindInMap [InstanceMinMax, !Ref 'Environment',MinInstance]
      MaxSize: !FindInMap [InstanceMinMax, !Ref 'Environment',MaxInstance]
      VPCZoneIdentifier: #This should have gone to private subnet with NAT G/w, but this it is not registering to ECS cluster.
        - !ImportValue ServianTechChallengeAppPubSN1
        - !ImportValue ServianTechChallengeAppPubSN2
  ServianTechChallengeAppASGDown:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: CreateDevSchedules
    Properties:
      AutoScalingGroupName: !Ref ServianTechChallengeAppASG
      MaxSize: 0
      MinSize: 0
      Recurrence: "0 12 * * *"
  ServianTechChallengeAppASGUp:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: CreateDevSchedules
    Properties:
      AutoScalingGroupName: !Ref ServianTechChallengeAppASG
      MinSize: !FindInMap [ InstanceMinMax, !Ref 'Environment',MinInstance ]
      MaxSize: !FindInMap [ InstanceMinMax, !Ref 'Environment',MaxInstance ]
      Recurrence: "0 22 * * *"